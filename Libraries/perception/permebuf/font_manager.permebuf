// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace perception;

// Represents a style of font.
message FontStyle {
	// How thick the font is.
	enum Weight {
		THIN = 1;
		EXTRALIGHT = 40;
		LIGHT = 50;
		SEMILIGHT = 55;
		BOOK = 75;
		REGULAR = 80;
		MEDIUM = 100;
		SEMIBOLD = 180;
		BOLD = 200;
		EXTRABOLD = 205;
		BLACK = 210;
		EXTRABLACK = 215;
	}
	Weight : Weight = 1;

	// How wide the font is.
	enum Width {
		ULTRACONDENSED = 50;
		EXTRACONDENSED = 63;
		CONDENSED = 75;
		SEMICONDENSED = 87;
		NORMAL = 100;
		SEMIEXPANDED = 113;
		EXPANDED = 125;
		EXTRAEXPANDED = 150;
		ULTRAEXPANDED = 200;

	}
	Width : Width = 2;

	// How slanted the font is.
	enum Slant {
		UPRIGHT = 1;
		ITALIC = 2;
        OBLIQUE = 3;
	}
	Slant : Slant = 3;
}

// Represents the font manager.
service FontManager {
	// Finds a font that best matches what is requested.
	message MatchFontRequest {
		// The name of the family of fonts.
		FamilyName : string = 1;

		// The requested style of fonts.
		Style : FontStyle = 2;
	}
	message MatchFontResponse {
		// The name of the family of fonts.
		// This may be different to the requested family name if it's not available.
		FamilyName : string = 1;

		// Path of the font file.
		Path : string = 2;

		// The style of this font.
		// This may be different to the requested style if it's not available in that style.
		Style : FontStyle = 3;

		// Index of the face.
		FaceIndex : int32 = 4;
	}
	MatchFont : MatchFontRequest -> MatchFontResponse = 1;

	// Gets all of the fonts families that are available to use.
	minimessage GetFontFamiliesRequest {}
	message GetFontFamiliesResponse {
		// The names of each font family.
		FontFamilyNames : array<string> = 1;
	}
	GetFontFamilies : GetFontFamiliesRequest -> GetFontFamiliesResponse = 2;

	// Gets all of the styles that are available for a font family.
	message GetFontFamilyStylesRequest {
		// The name of the font family.
		FamilyName : string = 1;
	}
	message GetFontFamilyStylesResponse {
		// The styles this font family is available in.
		Styles : array<FontStyle> = 1;
	}
	GetFontFamilyStyles : GetFontFamilyStylesRequest -> GetFontFamilyStylesResponse = 3;
}
