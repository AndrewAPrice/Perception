// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace perception;

// The type of entry in a directory.
enum DirectoryEntryType {
	// This directory entry is a file.
	File = 1;

	// Thie directory entry is a directory.
	Directory = 2;	
}

message DirectoryEntry {
	// Name of the directory entry.
	Name : string = 1;

	// Type of entry this is.
	Type : DirectoryEntryType = 2;

	// The size of this entry, in bytes, if it's
	// a file.
	SizeInBytes : uint64 = 3;
}

// A file on a disk.
service File {
	// Closes the file.
	minimessage CloseFileMessage {}
	CloseFile : CloseFileMessage = 0;

	// Reads the contents of a file.
	minimessage ReadFileRequest {
		// The offset in the file to start reading from.
		OffsetInFile : uint64 = 1;

		// The offset in the buffer to start writing to.
		OffsetInDestinationBuffer : uint64 = 2;

		// The bytes to copy from the file into the buffer.
		BytesToCopy : uint64 = 3;

		// The buffer to write into.
		BufferToCopyInto : SharedMemory = 4;
	}
	minimessage ReadFileResponse {}
	ReadFile : ReadFileRequest -> ReadFileResponse = 1;

	// Grants the storage device permission to allocate memory pages into a buffer.
	// The caller must have granted permission to process ID serving the File for
	// this operation to work.
	minimessage GrantStorageDevicePermissionToAllocateSharedMemoryPagesRequest {
		// The shared memory buffer to grant permission for the storage device to
		// allocate memory pages to.
		Buffer : SharedMemory = 1;
	}
	minimessage GrantStorageDevicePermissionToAllocateSharedMemoryPagesResponse {}
	GrantStorageDevicePermissionToAllocateSharedMemoryPages :
		GrantStorageDevicePermissionToAllocateSharedMemoryPagesRequest ->
		GrantStorageDevicePermissionToAllocateSharedMemoryPagesResponse = 2;
}

// A memory mapped file.
service MemoryMappedFile {
	// Closes the file.
	minimessage CloseFileMessage {}
	CloseFile : CloseFileMessage = 0;
}

// A device that stores data, such as a hard disk.
service StorageManager {
	// Opens a file.
	message OpenFileRequest {
		// The path to open.
		Path : string = 1;
	}
	minimessage OpenFileResponse {
		// The file handle.
		File : File = 1;

		// The size of this file, in bytes.
		SizeInBytes : uint64 = 2;

		// The optimal operation size, in bytes.
		OptimalOperationSize : uint64 = 3;
	}
	OpenFile : OpenFileRequest -> OpenFileResponse = 0;

	// Opens a memory mapped file. A memory mapped file returns a shared buffer containing
	// the entire contents of the file. However, the contents is lazily read in page chunks
	// when the process accesses the memory.
	message OpenMemoryMappedFileRequest {
		// The path to open.
		Path : string = 1;
	}
	minimessage OpenMemoryMappedFileResponse {
		// The file handle.
		File : MemoryMappedFile = 1;

		// The shared memory containing the file's contents.
		FileContents : SharedMemory = 2;
	}
	OpenMemoryMappedFile : OpenMemoryMappedFileRequest -> OpenMemoryMappedFileResponse = 1;

	// Reads the entries in a directory.
	message ReadDirectoryRequest {
		// The path of the directory to open.
		Path : string = 1;

		// The index of the first item to return. Useful
		// for paginating the request.
		FirstIndex : uint64 = 2;

		// The maximum number of entries to return.
		// '0' is no limit.
		MaximumNumberOfEntries : uint64 = 3;
	}
	message ReadDirectoryResponse {
		// Each entry in the directory.
		Entries : list<DirectoryEntry> = 1;

		// If there are more additional entries beyond
		// what was requested in MaximumNumberOfEntries.
		HasMoreEntries : bool = 2;
	}
	ReadDirectory : ReadDirectoryRequest -> ReadDirectoryResponse = 2;

	// Checks the permissions on a file.
	message CheckPermissionsRequest {
		// The path to check.
		Path : string = 1;
	}
	minimessage CheckPermissionsResponse {
		// Does the file exist?
		FileExists : bool = 1;

		// Can we read this file?
		CanRead : bool = 2;

		// Can we write to this file?
		CanWrite : bool = 3;

		// Can we execute this file?
		CanExecute : bool = 4;
	}
	CheckPermissions : CheckPermissionsRequest -> CheckPermissionsResponse = 3;

	// Get statistics about the file.
	message GetFileStatisticsRequest {
		// The path to check.
		Path : string = 1;
	}
	minimessage GetFileStatisticsResponse {
		// Does this file exist?
		Exists : bool = 1;

		// Is this a regular file?
		IsFile : bool = 2;

		// Is this a directory?
		IsDirectory : bool = 3;

		// The size of this file in bytes, if it's a file.
		SizeInBytes : uint64 = 4;

		// Get the optimal size for file operations, in bytes.
		OptimalOperationSize : uint64 = 5;
	}
	GetFileStatistics : GetFileStatisticsRequest -> GetFileStatisticsResponse = 4;
}
