// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace perception.devices;

enum StorageType {
	Optical = 1;	
}

enum StorageDeviceStatus {
	Successful = 1;
	InvalidBuffer = 2;
	BeyondEndOfDevice = 3;
	BeyondEndOfBuffer = 4;
	NoDisk = 5;
}

// A device that stores data, such as a hard disk.
service StorageDevice {
	// Gets details about this storage device.
	minimessage GetDeviceDetailsRequest {}
	message GetDeviceDetailsResponse {
		// Size of the device in bytes.
		SizeInBytes : uint64 = 1;

		// Is this device writable?
		IsWritable : bool = 2;

		// The type of storage device this is.
		Type : StorageType = 3;

		// The name of the device.odel
		Name : string = 4;
	}
	GetDeviceDetails : GetDeviceDetailsRequest -> GetDeviceDetailsResponse = 0;

	// Reads from the storage device.
	minimessage ReadRequest {
		// The offset on the device to start reading from.
		OffsetOnDevice : uint64 = 1;

		// The offset in the buffer to start writing to.
		OffsetInBuffer : uint64 = 2;

		// The number of bytes to copy from the device into the buffer.
		BytesToCopy : uint64 = 3;

		// The shared memory buffer to write to.
		Buffer : SharedMemory = 4;
	}
	minimessage ReadResponse {
		// The status of the read. Anything other than Successful
		// did not copy data.
		Status : StorageDeviceStatus = 1;
	}
	Read : ReadRequest -> ReadResponse = 1;

}
