// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

namespace perception.devices;

// Represents drawing commands.
oneof GraphicsCommand {
	// Refernce to a texture.
	message TextureReference {
		// ID of the texture. 0 = the screen.
		Texture : uint64 = 1;
	}
	// Sets the texture to write to.
	SetDestinationTexture : TextureReference = 1;

	// Sets the texture to read from.
	SetSourceTexture : TextureReference = 2;

	// Copies an entire texture from A to the top left corner of B.
	message CopyEntireTexture { }
	// One of the only few operations allowed to the framebuffer.
	CopyEntireTexture : CopyEntireTexture = 3;

	// Copies an entire texture from A to the top left corner of B with
	// alpha blending.
	CopyEntireTextureWithAlphaBlending : CopyEntireTexture = 4;

	// Copy texture A to a specific position on texture B.
	message CopyTextureToPosition {
		// The left coordinate, in pixels, to start copying to.
		LeftDestination: uint32 = 1;

		// The top coordinate, in pixels, to start copying to.
		TopDestination: uint32 = 2;
	}
	// One of the only few operations allowed to the framebuffer.
	CopyTextureToPosition : CopyTextureToPosition = 5;

	// Copy texture A to a specific position on texture B with
	// alpha blending.
	CopyTextureToPositionWithAlphaBlending : CopyTextureToPosition = 6;

	// Copy a part of texture A to a specific position on texture B.
	message CopyPartOfATexture {
		// The left coordinate, in pixels, to start copying from.
		LeftSource: uint32 = 1;

		// The top coordinate, in pixels, to start copying from.
		TopSource: uint32 = 2;

		// The left coordinate, in pixels, to copy to.
		LeftDestination: uint32 = 3;

		// The top coordinate, in pixels, to copy to.
		TopDestination: uint32 = 4;

		// How wide of an area, in pixels, to copy.
		Width: uint32 = 5;

		// How tall of an area, in pixels, to copy.
		Height: uint32 = 6;
	}
	// One of the only few operations allowed to the framebuffer.
	CopyPartOfATexture : CopyPartOfATexture = 7;

	// Copy part of texture A to a specific position on texture B
	// with alpha blending.
	CopyPartOfATextureWithAlphaBlending : CopyPartOfATexture = 8;

	// Files a rectangle with a constant color.
	message FillRectangle {
		// The left coordinate, in pixels, to start filling from.
		Left: uint32 = 1;

		// The top coordinate, in pixels, to start filling from.
		Top: uint32 = 2;

		// The right coordinate, in pixels, to stop filling at.
		Right: uint32 = 3;

		// The bottom coordinate, in pixels, to stop filling at.
		Bottom: uint32 = 4;

		// The color to fill with. In 32-bit RGBA format.
		Color: uint32 = 5;
	}
	FillRectangle : FillRectangle = 9;
}

// Represents a graphics device that you can draw pixels on.
service GraphicsDriver {
	// Executes a set of graphics commands.
	message RunCommandsMessage {
		// The commands to execute.
		Commands : list<GraphicsCommand> = 1;
	}
	RunCommands : RunCommandsMessage = 0;

	// Executes a set of commands and replies when they are done.
	minimessage EmptyResponse {}
	RunCommandsAndWait : RunCommandsMessage -> EmptyResponse = 1;

	// Creates a texture.
	minimessage CreateTextureRequest {
		// The width of the texture in pixels.
		Width : uint32 = 1;

		// The height of the texture in pixels.
		Height : uint32 = 2;
	}
	minimessage CreateTextureResponse {
		// The texture ID. If 0, the texture could not be created.
		Texture : uint64 = 1;

		// The shared memory buffer we can write to.
		PixelBuffer : SharedMemory = 2;
	}
	CreateTexture : CreateTextureRequest -> CreateTextureResponse = 2;

	// Destroys a texture. Only the process that created a texture can
	// destroy the texture. Textures are automatically destroyed when
	// the owning process dies.
	minimessage DestroyTextureMessage {
		// The texture to destroy.
		Texture : uint64 = 1;
	}
	DestroyTexture : DestroyTextureMessage = 3;

	// Gets information about a texture.
	minimessage GetTextureInformationRequest {
		// The texture to query.
		Texture : uint64 = 1;
	}
	minimessage GetTextureInformationResponse {
		// The process that owns the texture. 0 if the texture is
		// invalid.
		Owner : uint64 = 1;

		// The width of the texture, in pixels.
		Width : uint32 = 2;

		// The height of the texture, in pixels.
		Height : uint32 = 3;
	}
	GetTextureInformation :
		GetTextureInformationRequest -> GetTextureInformationResponse = 4;

	// Sets the process that is allowed to draw directly to the screen.
	minimessage SetProcessAllowedToDrawToScreenMessage {
		// The process that is allowed to draw to the screen.
		Process : uint64 = 1;
	}
	SetProcessAllowedToDrawToScreen : SetProcessAllowedToDrawToScreenMessage = 5;

	// Queries for information about the screen size.
	minimessage GetScreenSizeRequest {}
	minimessage GetScreenSizeResponse {
		// The width of the screen, in pixels.
		Width : uint32 = 1;

		// The height of the screen, in pixels.
		Height : uint32 = 2;
	}
	GetScreenSize : GetScreenSizeRequest -> GetScreenSizeResponse = 6;
}
